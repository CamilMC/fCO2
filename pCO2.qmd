---
title: "pCO2"
format: html
editor: visual
---

```{r dataset}
library(AquaEnv)
library(MASS)
library(dplyr)
library(ggplot2)

cba.all <- readxl::read_xlsx("CBA_100Lakes_Master.xlsx")
boxplot(cba.all$TOC)
boxplot(cba.all$Alkalinity)
cba <- subset(cba.all, TOC < 40) %>% subset(Alkalinity < 1)

bdg.niva <- readRDS("bdg.niva.rds") %>% select(c("CBA_Lake_ID", "lake_area_km2","basin_area_km2"))

cba <- merge(cba,bdg.niva, by.x = "Lake_ID", by.y = "CBA_Lake_ID")
```

Problems with dataset:

-   In the CBA dataset, alkalinity is supposed to be in meq/L (and I double-checked) but I have a doubt about it, since I only get the right order of magnitude in the results if I consider it to be in ueq/L.

-   After talking to Nico, i confirm that CO2 is the sum of all carbonates (so SumCO2 in aquaenv)

Reference for headspace method: Jan Ã…berg & B. Wallin, 2014

Reference for K0, K1, K2 and Kw: Harned et Davis, 1943

Reference for Organic Alkalinity correction: Liu et al 2020. ! "\~47% of the 4635 records were from tropical areas, tropical freshwaters were comparatively more represented". Maybe not so adapted to boreal freshwater. \~80% from rivers. TA measured on filtered water.

Carbonate equilibrium: Appelo et Postma 2005 / Cole and Praire 2009

Temperature: here we use in-situ temperature but since pH and Alk were measured in the lab, we should maybe use storage temperature (4 degrees)

```{r variables}

# Equilibrium constants
Temp <- cba$T + 273.15 # in K

Kw = exp(148.9802 - 13847.26/Temp - 23.6521*log(Temp)) # Dickson and Riley, 1979

K0 <- 10^-((-2622.38/Temp) + 15.5873 - 0.0178471*Temp) #Harned and Davis, 1943
K1 <- 10^-((3404.71/Temp)- 14.8435 + 0.032786*Temp) # Harned and Davis, 1943
K2 <- 10^-((2902.39/Temp) - 6.4980 + 0.02379*Temp) # Harned and Scholes, 1941

# CO2 partial pressure in atmosphere
fCO2.2019 <- 410.5 # in ppm
fCO2.2019.atm <- fCO2.2019 * 1e-6 # in atm

# Total inorganic carbon
DIC <- as.numeric(cba$CO2) * 1e-6 # from umol/L to mol/L

# Total organic carbon
TOC <- cba$TOC/12.011 * 1e-3 # mg/L to mol/L

# Conductivity
EC <- cba$EC_Kje # uS/cm
I <- 1.3e-5 * EC #@Liu
TP <- as.numeric(cba$TOTP) / 30.974 * 1e-6 # from ug/L to mol/L
CP <- TOC/TP

# Temperature, pH, Alkalinity
temp <- cba$T
TA <- cba$Alkalinity * 1e-3 # convert from meq/L to mol/L
pH <- cba$pH_Kje
Hplus <- 10^(-pH)
pH_Liu <- pH - (0.03+0.05*log10(I))

# Organic alkalinity
OA_Liu <- cba$TOC * 1e3 / 12.011 * 0.08 * 1e-6 # toc from mg/L to umol/L multiplied by fraction of acids -> gives OrgAlk in ueq/L --> converted in mol/L

# Coordinates
Lt <- cba$Lat
Lg <- cba$Long
A <- cba$lake_area_km2 * 1e3 # converts to m2

rC <- DIC/TOC

```

```{r distribution}
boxplot(DIC)
boxplot(TOC)
boxplot(OA_Liu)
boxplot(TA)

plot(TA, OA_Liu)
abline(a=0, b = 1)

qplot()+geom_boxplot(aes(x = "pH measured", y = pH))+geom_boxplot(aes(x = "pH Liu", y = pH_Liu))+
  theme_minimal()
```

TA has very high outliers. Should I remove them? TA \> 0.001 mol/L

```{r ratio-DIC-TOC}
qplot(Lg,Lt,col = rC, size = log10(A))+scale_color_viridis_c()+
  theme_minimal()
plot(log10(A), rC)
```

# Using aquaenv

## aquaenv without correction

```{r aquaenv-no-correction}

ae1 <- aquaenv(S=0, t=temp,pH = pH, TA=TA, SumCO2 = NULL, fCO2atm = fCO2.2019.atm)

plot(DIC, ae1$SumCO2)
abline(a=0, b=1)

plot(TOC, ae1$fCO2)
text(x = 0.0025, y = 0.012, label = paste("super = ",sum(ae1$fCO2 > fCO2.2019.atm)))
text(x = 0.0025, y = 0.010, label = paste("under = ", sum(ae1$fCO2 < fCO2.2019.atm)))
abline(a = fCO2.2019.atm , b = 0)

```

Aquaenv overstimate DIC concentration. All lakes are supersaturated.

## Aquaenv with OA correction from Liu

```{r aquaenv-Liu-correction}

ae2 <- aquaenv(S=0, t=temp,pH = pH, TA=(TA-OA_Liu), SumCO2 = NULL, fCO2atm = fCO2.2019.atm)

plot(DIC, ae2$SumCO2)
abline(a=0, b=1)

plot(TOC, ae2$fCO2)
text(x = 0.0025, y = -0.010, label = paste("super = ",sum(ae2$fCO2 > fCO2.2019.atm)))
text(x = 0.0025, y = -0.015, label = paste("under = ", sum(ae2$fCO2 < fCO2.2019.atm)))
abline(a = fCO2.2019.atm , b = 0)
```

Better correlation between SumCO2 and DIC. Most lakes become undersaturated

## Aquaenv using pH and CO2, to find TA

```{r aquaenv-TA}

ae2 <- aquaenv(S=0, t=temp,pH = pH, SumCO2 = DIC, fCO2atm = fCO2.2019.atm)

plot(TA, ae2$TA)
abline(a=0, b=1)
```

Calculated carbonate alkalinity is much lower than TA.

# Compute fCO2 from CO2 manually

## Theory

$TIC = [H_2CO_3] + [HCO_3^-]+[CO_3^{2-}]$

$[HCO_3^-] = K_1 \times [H_2CO_3] / [H^+]$

$[CO_3^{2-}] = K_2 \times [HCO_3^-] /[H^+] = K_2 / [H^+] \times K_1 \times [H_2CO_3] / [H^+]$

$TIC = [H_2CO_3] + K_1 \times [H_2CO_3]/[H^+] + K_2 /[H^+] \times K_1 \times [H_2CO_3] / [H^+]$

$TIC = [H_2CO_3] \times (1 + K_1 / [H^+] + K_1 \times K_2 / [H^+]^2 )$

$[H_2CO_3] = TIC \times 1/(1 + K_1/[H^+] + K_1 \times K_2 / [H^+]^2)$

And $[H_2CO_3] = pCO_2 \times K_0$, or $pCO_2 = [H_2CO_3] / K_0$

Could also take Ca in consideration, but probably not significant here: https://link.springer.com/content/pdf/10.1007/s002160050832.pdf

## Carbonate speciation

```{r manually-find-pCO2}
#  DIC = H2CO3 + HCO3 +CO3 
H2CO3 <- DIC*1/(1+(K1/Hplus)+(K1*K2/Hplus^2)) # in mol/L
HCO3 <- H2CO3 * K1 / Hplus
CO3 <- K2 * HCO3 / Hplus

# Check
C <- H2CO3 + HCO3 + CO3
plot(DIC,C)

# Check with pH

qplot()+geom_point(aes(pH, H2CO3, col = "H2CO3"))+
  geom_point(aes(x = pH, y = HCO3, col = "HCO3"))+
  geom_point(aes(x=pH, CO3, col = "CO3"))+
  scale_color_manual(values = c("firebrick","lightblue","orange"))+
  theme_minimal()

fCO2 <- H2CO3/K0
plot(TOC, fCO2)
text(x = 0.0025, y = 0.004, label = paste("super = ",sum(fCO2 > fCO2.2019.atm)))
text(x = 0.0025, y = 0.003, label = paste("under = ", sum(fCO2 < fCO2.2019.atm)))
abline(a = fCO2.2019.atm, b = 0)
```

```{r manually-find-pCO2-pH-Liu}
HpLiu <- 10^(-pH_Liu) 
  
#  DIC = H2CO3 + HCO3 +CO3 
H2CO3_Liu <- DIC*1/(1+(K1/HpLiu)+(K1*K2/HpLiu^2)) # in mol/L
HCO3_Liu <- H2CO3_Liu * K1 / HpLiu
CO3_Liu <- K2 * HCO3_Liu / HpLiu

# Check
C_Liu <- H2CO3_Liu + HCO3_Liu + CO3_Liu
plot(DIC,C_Liu)

# Check with pH

qplot()+geom_point(aes(pH, H2CO3_Liu, col = "H2CO3"))+
  geom_point(aes(x = pH, y = HCO3_Liu, col = "HCO3"))+
  geom_point(aes(x=pH, CO3_Liu, col = "CO3"))+
  scale_color_manual(values = c("firebrick","lightblue","orange"))+
  theme_minimal()

fCO2_Liu <- H2CO3_Liu/K0

plot(TOC, fCO2_Liu)
text(x = 0.0025, y = 0.004, label = paste("super = ",sum(fCO2_Liu > fCO2.2019.atm)))
text(x = 0.0025, y = 0.003, label = paste("under = ", sum(fCO2_Liu < fCO2.2019.atm)))
abline(a = fCO2.2019.atm, b = 0)

qplot(fCO2,fCO2_Liu,col = pH)+scale_color_viridis_c()+geom_abline(slope = 1, intercept = 0, col = "gray")+

  theme_minimal()
```

No big difference with pH correction. Some lakes are very supersaturated, but half are not.

Less lakes are supersaturated compared to the aquaenv model. Less high fCO2 values

## Carbonate, Inorganic and Organic Alkalinity

\@Hruska method

$CA = [HCO_3^-] + 2[CO_3^{2-}]$

$IA = [OH- + 2[SO_4{2-}] + [NO_3^-] + [CL^-] + [F^-] - [H^+] - 2[Ca^{2+}] - 2[Mg^{2+}] - [K^+] + [Na^+]$

$OA = [organic \; bases] - [organic \; acids]$

$TA = CA + IA + OA <=> OA = TA - CA - IA$

```{r OA-from-ions}

# Inorganic alkalinity
Ca <- cba$Ca / 40.78 * 1e-3 #mg/L to mol/L
Mg <- cba$Mg / 24.305 * 1e-3
Kplus <- cba$K / 39.098 * 1e-3
Na <- cba$Na / 22.990 * 1e-3
Al <- cba$Al / 26.982 * 1e-3

SO4 <- cba$SO4 / (32.06+4*15.999) * 1e-3
NO3 <- as.numeric(cba$NO3) / (14.007 + 3*15.999) * 1e-3
NO3[which(is.na(NO3) == T)] <- 0
Cl <- cba$Cl / 35.35 * 1e-3
Fmin <- as.numeric(cba$F) / 18.998 *1e-3
Fmin[which(is.na(Fmin) == T)] <- 0
OH <- Kw/HpLiu

IA <- 2*SO4+NO3+Cl+Fmin+HpLiu-2*Ca-2*Mg-Kplus-Na-OH  #Al doesn't change the results
plot(TA,IA/TA)

#carbonate alkalinity
CA <- HCO3+2*CO3
plot(TA, CA)
abline(a = 0, b = 1, col = "red")
plot(TA, CA/TA)

# Organic alkalinity
OA <- TA - IA - CA
plot(TA, OA/TA)

# Non-carbonate alkalinity
NCA <- IA + OA # = TA - CA
plot(TA, NCA/TA)
```

```{r OA}
alk_df <- data.frame(TA = TA, OA = OA, OA_Liu = OA_Liu, NCA = IA + OA, CA = CA, CA_Liu = TA - OA_Liu)

ggplot(alk_df,aes(x = TA)) + geom_point(aes(y = OA, col = "calculated OA"))+
  geom_point(aes(y = OA_Liu, col = "OA according to Liu"))+
  geom_point(aes(y = NCA, col = "calculated\n non carbonate alk"))+
  scale_color_manual(values= c("firebrick", "lightblue","orange"))+
  geom_abline(slope = 1, intercept = 0)+
  theme_minimal()

ggplot(alk_df,aes(x = TA)) + geom_point(aes(y = CA, col = "calculated CA"))+
  geom_point(aes(y = CA_Liu, col = "CA according to Liu"))+
  geom_point(aes(y = NCA, col = "calculated\n non carbonate alk"))+
  scale_color_manual(values= c("firebrick", "lightblue","orange"))+
  geom_abline(slope = 1, intercept = 0)+
  theme_minimal()

```

Looks like the CA we calculate is equal to the OA calculated according to Liu.

From @Kerr2021: \* There are more errors in carbonate alkalinity in low salinity waters because the equilibrium constants have not been rigorously evaluated @Woosley2021 \* Alkalinity on filtered water \<- no microbial alkalinity. Contribution expected to be low @Kim2996, @Ko2006

## Compare TA from aquaenv with CA manual

```{r compare-CA-aquaenv-manual}
ae3 <- aquaenv(t = temp, S = 0, pH = pH_Liu, SumCO2 = DIC)
qplot()+geom_point(aes(x=TA, y = ae3$TA, col = "AquaEnv"))+geom_point(aes(x = TA, y = CA, col = "Manual"))+
  scale_color_manual(values = c("firebrick","lightblue"))+labs(x = "TA, mol/L", y = "CA, mol/L")+
  theme_minimal()
```

Good correspondance between CA calculated with aquaenv and CA calculated manually!

# Model CA

```{r lm-CA-TA}
summary(m1 <- rlm(CA~TA, method = "MM"))
plot(TA, CA)
abline(a=coef(m1)[1], b = coef(m1)[2])
```

CA is \~33% of TA for low TA.

```{r lm-CA-TOC}
summary(m2 <- lm(CA~TOC, method = "MM"))
plot(TOC, CA)
abline(a=coef(m2)[1], b = coef(m2)[2])
```

```{r lm-CA-EC}
summary(m3 <- lm(CA~EC))
plot(EC, CA)
abline(a=coef(m3)[1], b = coef(m3)[2])
```

```{r lm-CA-TOC-EC}
summary(m <- lm(CA~EC+TOC))
summary(m2 <- step(m))
saveRDS(m2, "m2.rds")
        
CAp <- predict(m, type = "response")
plot(TOC, CA)
points(TOC, CAp, col = "red")
text(labels = paste("r2 = ",round((cor(CA,CAp, use = "pairwise.complete"))^2,2)), x = 5e-4, y = 3e-4)
```

However these variables are skewed. Test with log-transformation

```{r lm-log-CA-EC-TOC}
summary(m <- lm(log10(CA)~log10(EC)+log10(TOC)))
saveRDS(m, "m3.rds")
        
CAp <- 10^predict(m3, type = "response")
plot(TOC, CA)
points(TOC, CAp, col = "red")
text(labels = paste("r2 = ",round((cor(CA,CAp, use = "pairwise.complete"))^2,2)), x = 5e-4, y = 3e-4)
```

```{r glm-log-CA-EC-TOC}
summary(m4 <- glm(CA~TA*EC*TOC), family = Gamma(link = "log"))
saveRDS(m4, "m4.rds")
        
CAp <- predict(m4, type = "response")
plot(TOC, CA)
points(TOC, CAp, col = "red")
text(labels = paste("r2 = ",round((cor(CA,CAp, use = "pairwise.complete"))^2,2)), x = 5e-4, y = 3e-4)
```

```{r test-CA-aquaenv}
ae6 <- aquaenv(pH = pH, TA = CAp, SumCO2 = NULL, t = temp, S = 0)
plot(fCO2, ae6$fCO2)
abline(a = 0, b = 1)

which.max(ae6$fCO2) 
which.min(temp)
```

Works well for pH \> 5.5

# Model IA

```{r model-ia}
summary(m5 <- lm(IA~EC))

plot(EC, IA)
abline(a = coef(m5)[1], b = coef(m5)[2], col = "red")
```

# Model OA

OA is defined as OA = TA - IA - CA: it strongly depends on the above calculated variables and reflect some of it.

```{r lm-OA-TOC}
summary(m <- lm(OA~TOC)) 
plot(TOC, OA)
abline(a = coef(m)[1], b = coef(m)[2], col = "red")
```

```{r lm-OA-logTOC}

summary(m <- lm(log10(OA)~log10(TOC))) 
plot(log10(TOC), log10(OA))
abline(a = coef(m)[1], b = coef(m)[2], col = "red")
```

```{r lm-OA}
summary(m2 <- lm(OA~EC))
plot(EC, OA)
abline(a = coef(m2)[1], b = coef(m2)[2], col = "red")
```

most dependant on EC, but mainly because is calculated from IA

```{r compare-OA-OALiu}

plot(OA, OA_Liu)
abline(a = 0, b = 1)
plot(NCA, OA_Liu)
abline(a = 0, b = 1)
```

## KDOM?

From @Kulinski2012

OA depends on a dissociation constant $K_{DOM}$, pH, and the fraction of DOM that carries carboxylic group.

$OA = \frac{K_{DOM} \times f.DOC}{[H^+]+K_{DOM}}$

Values for river water:

-   K = 2.98e-8

-   f = 0.14

```{r OA-Hplus}
invH <- 1/Hplus
summary(klm <- lm(OA~TOC:invH))


kOA <- coef(klm)[2]*TOC*invH+coef(klm)[1]
plot(OA,kOA)
abline(a = 0, b = 1)
```

# Model NCA

NCA = TA - CA

```{r model-nca}
summary(n1 <- lm(NCA~EC+TOC))

NCAp <- predict(n1, type = "response")
plot(NCA, NCAp)
abline(a = 0, b = 1)

plot(TOC, NCA)
points(TOC, NCAp, col = "red")
text(labels = paste("r2 = ",round((cor(NCA,NCAp, use = "pairwise.complete"))^2,2)), x = 5e-4, y = 6e-4)

plot(EC, NCA)
points(EC, NCAp, col = "red")
text(labels = paste("r2 = ",round((cor(NCA,NCAp, use = "pairwise.complete"))^2,2)), x = 25, y = 6e-4)
```

```{r glm-OA-TOC}
summary(n2 <- glm(NCA~TOC+EC, family = Gamma(link = "sqrt"))) 

NCAp <- predict(n2, type = "response")
plot(TA, NCAp)
abline(a = 0, b = 1)

plot(TOC, NCA)
points(TOC, NCAp, col = "red")
text(labels = paste("r2 = ",round((cor(NCA,NCAp, use = "pairwise.complete"))^2,2)), x = 5e-4, y = 6e-4)

plot(EC, NCA)
points(EC, NCAp, col = "red")
text(labels = paste("r2 = ",round((cor(NCA,NCAp, use = "pairwise.complete"))^2,2)), x = 25, y = 6e-4)
```

```{r model-nca-log}
summary(n3 <- lm(log10(NCA)~log10(EC)+log10(TOC)))
saveRDS(n3, "n3.rds")

NCAp <- 10^predict(n3, type = "response")

plot(TA, NCAp)
abline(a = 0, b = 1)

plot(TOC, NCA)
points(TOC, NCAp, col = "red")
text(labels = paste("r2 = ",round((cor(NCA,NCAp, use = "pairwise.complete"))^2,2)), x = 5e-4, y = 6e-4)

plot(EC, NCA)
points(EC, NCAp, col = "red")
text(labels = paste("r2 = ",round((cor(NCA,NCAp, use = "pairwise.complete"))^2,2)), x = 25, y = 6e-4)
```

Better than non-transformed LM.

```{r model-nca-gam}
library(mgcv)

summary(n4 <- gam(log10(NCA)~log10(EC)+log10(TOC)))
saveRDS(n4, "n4.rds")

NCAp <- 10^predict(n4, type = "response")

plot(TA, NCAp)
abline(a = 0, b = 1)

plot(TOC, NCA)
points(TOC, NCAp, col = "red")
text(labels = paste("r2 = ",round((cor(NCA,NCAp, use = "pairwise.complete"))^2,2)), x = 5e-4, y = 6e-4)

plot(EC, NCA)
points(EC, NCAp, col = "red")
text(labels = paste("r2 = ",round((cor(NCA,NCAp, use = "pairwise.complete"))^2,2)), x = 25, y = 6e-4)
```

https://stats.oarc.ucla.edu/r/dae/tobit-models/#%3A\~%3Atext%3DThe%20tobit%20model%2C%20also%20called%2Cbelow%20and%20above%2C%20respectively). About censoring: https://www.ssc.wisc.edu/\~bhansen/718/NonParametrics9.pdf

```{r model-nca-vgam}
library(VGAM)

summary(n4 <- vglm(NCA~EC+TOC, tobit(Lower = 0, Upper = TA)))
saveRDS(n4, "n4.rds")

NCAp <- predict(n4, type = "response")

plot(TA, NCAp)
abline(a = 0, b = 1)

plot(TOC, NCA)
points(TOC, NCAp, col = "red")
text(labels = paste("r2 = ",round((cor(NCA,NCAp, use = "pairwise.complete"))^2,2)), x = 5e-4, y = 6e-4)

plot(EC, NCA)
points(EC, NCAp, col = "red")
text(labels = paste("r2 = ",round((cor(NCA,NCAp, use = "pairwise.complete"))^2,2)), x = 25, y = 6e-4)
```

```{r model-nca-vgam}
library(VGAM)

summary(n5 <- vglm(log10(NCA)~log10(EC)+log10(TOC), tobit(Lower = -Inf, Upper = log10(TA))))
saveRDS(n5, "n5.rds")

NCAp <- 10^predict(n5, type = "response")

plot(TA, NCAp)
abline(a = 0, b = 1)

plot(TOC, NCA)
points(TOC, NCAp, col = "red")
text(labels = paste("r2 = ",round((cor(NCA,NCAp, use = "pairwise.complete"))^2,2)), x = 5e-4, y = 6e-4)

plot(EC, NCA)
points(EC, NCAp, col = "red")
text(labels = paste("r2 = ",round((cor(NCA,NCAp, use = "pairwise.complete"))^2,2)), x = 25, y = 6e-4)
```

```{r aquaenv with our predicted CA}
NCAp <- 10^predict(n3)

NCA <- TA - CA

plot(NCA, NCAp)
abline(a = 0, b = 1)

nae <- aquaenv(pH = pH_Liu, TA = TA-NCAp, SumCO2 = NULL, t = temp, S = 0)

plot(fCO2,nae$fCO2)
abline(a = 0, b = 1)
```
